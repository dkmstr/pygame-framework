{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"colli",
				"colliderect	(function)"
			],
			[
				"it",
				"itervalues	(function)"
			],
			[
				"iter",
				"itervalues	(function)"
			],
			[
				"getTil",
				"getTileSet"
			],
			[
				"tilwd",
				"tilewidth"
			],
			[
				"tilehe",
				"tileheight"
			],
			[
				"plat",
				"platform	(forflow)"
			],
			[
				"pt",
				"platforms	(statement)"
			],
			[
				"dir",
				"direction	(statement)"
			],
			[
				"la",
				"layers_names	(statement)"
			],
			[
				"s",
				"self	(param)"
			],
			[
				"a",
				"animation_orig_delay  (variable)"
			],
			[
				"ani",
				"animation_state	(statement)"
			],
			[
				"an",
				"animation_state	(statement)"
			],
			[
				"anima",
				"animation_state  (variable)"
			],
			[
				"Map",
				"MapObject	(class)"
			],
			[
				"Ti",
				"TileSet	(class)"
			],
			[
				"pro",
				"properties	(param)"
			],
			[
				"tile",
				"tileheight	(statement)"
			],
			[
				"wi",
				"tilewidth	(statement)"
			],
			[
				"prop",
				"properties	(statement)"
			],
			[
				"proper",
				"properties	(statement)"
			],
			[
				"prope",
				"propertiesDict	(param)"
			],
			[
				"base",
				"baseRes	(param)"
			],
			[
				"Ba",
				"basicConfig	(function)"
			],
			[
				"tiles",
				"tilespacing	(param)"
			],
			[
				"K_Q",
				"K_q	(class)"
			],
			[
				"on_k",
				"on_keyup	(function)"
			],
			[
				"KEY",
				"KEYUP	(class)"
			],
			[
				"fra",
				"framerate	(statement)"
			],
			[
				"ti",
				"tileheight	(statement)"
			],
			[
				"se",
				"setattr	(function)"
			],
			[
				"get",
				"gettext"
			],
			[
				"fin",
				"findall	(function)"
			],
			[
				"El",
				"ElementTree	(module)"
			],
			[
				"i",
				"iteritems	(function)"
			],
			[
				"Atta",
				"AttachedDocumentInline	(global, class)"
			],
			[
				"render",
				"render_to_string(template_name, dictionary, context_instance)	(imported, function)"
			],
			[
				"db_",
				"db_index"
			],
			[
				"Many",
				"ManyToManyRel	(imported, class)"
			],
			[
				"end",
				"endblock"
			],
			[
				"section",
				"section_name"
			],
			[
				"MED",
				"MEDIA_URL"
			],
			[
				"handler",
				"handler404"
			],
			[
				"hand",
				"handler404	(imported, instance)"
			],
			[
				"pa",
				"padding-left"
			],
			[
				"col",
				"color:   (property)"
			],
			[
				"n",
				"never_cache(view_func)	(global, function)"
			],
			[
				"EMAIL_SU",
				"EMAIL_CONFIRMATION_SUBJECT"
			],
			[
				"build_",
				"build_absolute_uri	(local, instance)"
			],
			[
				"UDSSub",
				"UDSUserSubscriptions"
			],
			[
				"color-",
				"color-gris"
			],
			[
				"primar",
				"primary-color-darker"
			],
			[
				"bs3-col",
				"bs3-col:3	bs3-col-3"
			],
			[
				"ex",
				"export_as_csv_action(description, fields, exclude, header)	(global, function)"
			],
			[
				"Model",
				"ModelAdmin	(imported, class)"
			],
			[
				"cont",
				"contains_basic_info()	(attribute, function)"
			],
			[
				"u",
				"updateUserData(user)	(attribute, function)"
			],
			[
				"User",
				"UserProfile	(global, class)"
			],
			[
				"block",
				"blocktrans	blocktrans"
			],
			[
				"down",
				"downloadable	(local, instance)"
			],
			[
				"B",
				"BETA_GROUP	(imported, instance)"
			],
			[
				"DOW",
				"DOWNLOADS	(imported, instance)"
			],
			[
				"DOWNL",
				"DOWNLOADS	(imported, instance)"
			],
			[
				"DO",
				"DOWNLOADABLES	(imported, instance)"
			],
			[
				"DOWN",
				"DOWNLOADS	(global, instance)"
			],
			[
				"downl",
				"downloadable_id	(local, instance)"
			],
			[
				"Mo",
				"ModifyUserForm	(global, class)"
			],
			[
				"UserPro",
				"UserProfileForm	(global, class)"
			],
			[
				"GRO",
				"GROUP_USERS	(global, instance)"
			],
			[
				"U",
				"UserSubscription	(global, class)"
			],
			[
				"st",
				"stdout	(attribute, instance)"
			],
			[
				"GROUP",
				"GROUP_ACTIVE_SUBSCRIPTION	(global, instance)"
			],
			[
				"GROUP_",
				"GROUP_EVALUATION	(global, instance)"
			],
			[
				"prim",
				"primary-color-dark"
			],
			[
				"LANGUAGE",
				"LANGUAGE_CODE"
			],
			[
				"UserP",
				"UserProfileForm	(global, class)"
			],
			[
				"drop",
				"dropdown-menu"
			],
			[
				"bs3-pa",
				"bs3-panel:heading	bs3-panel-heading"
			],
			[
				"bs3-p",
				"bs3-page-header	bs3-page header"
			],
			[
				"nav",
				"navbar-form"
			],
			[
				"padding",
				"padding-right"
			],
			[
				"HAY",
				"HAYSTACK_ENGINE	(global, instance)"
			],
			[
				"pad",
				"padding-right:   (property)"
			],
			[
				"marg",
				"margin-top"
			],
			[
				"bacg",
				"background-color:   (property)"
			],
			[
				"desta",
				"destacado-b"
			],
			[
				"text",
				"textarea	Tag"
			],
			[
				"margi",
				"margin-top"
			],
			[
				"inline",
				"inline-block  (value)"
			],
			[
				"pri",
				"primary-color-darker"
			],
			[
				"mar",
				"margin-top"
			],
			[
				"seco",
				"secondary-color-A"
			],
			[
				"primary-colo",
				"primary-color-dark"
			],
			[
				"bs3-nav",
				"bs3-navbar:responsive	bs3-navbar-responsive"
			],
			[
				"bs3-",
				"bs3-toolbar	bs3-button-toolbar"
			],
			[
				"incl",
				"include	@include"
			],
			[
				"mix",
				"mixin	@mixin"
			],
			[
				"bs3-na",
				"bs3-navbar:link	bs3-navbar-link"
			],
			[
				"kn",
				"knowledge_home"
			],
			[
				"bs3-co",
				"bs3-col:12	bs3-col-12"
			],
			[
				"bs3-for",
				"bs3-form:horizontal	bs3-form-horizontal"
			],
			[
				"bs3-pan",
				"bs3-panel:heading	bs3-panel-heading"
			],
			[
				"text-",
				"text-height:   (property)"
			],
			[
				"prima",
				"primary-color-darker"
			],
			[
				"CSRF",
				"CSRF_COOKIE_NAME"
			],
			[
				"border",
				"border-style"
			],
			[
				"data-tog",
				"data-toggle=  (attribute)"
			],
			[
				"secon",
				"secondary-color-A"
			],
			[
				"padding-",
				"padding-left:   (property)"
			],
			[
				"padd",
				"padding"
			],
			[
				"primary",
				"primary-color"
			],
			[
				"sec",
				"secondary-color-A-lighter"
			],
			[
				"second",
				"secondary-color-B"
			],
			[
				"colo",
				"color-negro"
			],
			[
				"navb",
				"navbar-nav"
			],
			[
				"log",
				"login  (function)"
			],
			[
				"color-verde-l",
				"color-verde-lihgter"
			],
			[
				"primary-color-li",
				"primary-color-lighter"
			],
			[
				"primary-color-dar",
				"primary-color-darker"
			],
			[
				"pr",
				"primary-color-lighter"
			],
			[
				"mouse",
				"mouseleave	mouseleave"
			],
			[
				"add",
				"addClass	addClass"
			],
			[
				"alig",
				"box-align:   (property)"
			],
			[
				"center",
				"center-block"
			],
			[
				"over",
				"overflow-x"
			],
			[
				"UDSAr",
				"UDSArticleLang"
			],
			[
				"back",
				"background-color"
			]
		]
	},
	"buffers":
	[
		{
			"file": "resources/test.py",
			"settings":
			{
				"buffer_size": 2673,
				"line_ending": "Unix"
			}
		},
		{
			"file": "resources/resources/images.py",
			"settings":
			{
				"buffer_size": 1787,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nimport pygame\nimport os\nimport base64\nimport struct\nimport xml.etree.ElementTree as ET\n\nfrom resources.util import resource_path\n\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\n######################\n# Path               #\n######################\nclass Path(object):\n    pass\n\n\n######################\n# Tile               #\n######################\nclass Tile(object):\n    def __init__(self, tileSet, tileId, surface, properties={}):\n        self._tileSet = tileSet\n        self._id = tileId\n        self._orig_surface = self._surface = surface\n        self.setProperties(properties)\n\n    def setProperties(self, properties):\n        self.properties = properties\n        self.updateAttributes()\n\n    def updateAttributes(self):\n        '''\n        Updates attributes of the object because properties was set\n        '''\n        self.sticky = self.properties.get('sticky', 'False') == 'True'\n        self.delay = int(self.properties.get('delay', '0'))\n        # Animation ids of tiles are relative to tileset\n        if self.properties.get('animation') is not None:\n            self.animated = True\n            self.animation = [int(i) for i in self.properties.get('animation', '-1').split(',')]\n            self.animation_orig_delay = self.animation_delay = int(self.properties.get('delay', '1'))\n            self.animation_state = 0\n            logger.debug('Added animation for tile {}: {}'.format(self._id, self.animation))\n        else:\n            self.animated = False\n            self.animation = None\n            self.animation_state = None\n\n    def update(self):\n        if self.animated is False:\n            return\n        self.animation_delay -= 1\n        if self.animation_delay > 0:\n            return\n        self.animation_delay = self.animation_orig_delay\n        if self.animation_state >= len(self.animation):\n            self.animation_state = 0\n            self.resetImage()\n        else:\n            self._surface = self._tileSet.getTile(self.animation[self.animation_state]).getImage()\n            self.animation_state += 1\n\n    def getProperty(self, propertyName):\n        '''\n        Obtains a property associated whit this tileset\n        '''\n        return self.properties.get(propertyName)\n\n    # This x,y coordinates are screen coordinates\n    # TileArray, Platform, etc.. converts coordinates of objects acordly beforw invoking it\n    def draw(self, toSurface, x, y):\n        if self._surface is not None:\n            toSurface.blit(self._surface, (x, y))\n\n    def getImage(self):\n        return self._surface\n\n    def setImage(self, surface):\n        self._surface = surface\n\n    def resetImage(self):\n        self._surface = self._orig_surface\n\n    def id(self):\n        return self._id\n\n    def getTileSet(self):\n        return self._tileSet\n\n    def __unicode__(self):\n        return 'Tile {} ({}x{}) ({})'.format(self._id, self._surface.get_width(), self._surface.get_height(), self.properties)\n\n\nclass Platform(object):\n    def __init__(self, origX, origY, width, height, path, tiles, sticky):\n        self.rect = pygame.Rect(origX, origY, width, height)\n        self.path = path\n        self.tiles = tiles\n        self.sticky = sticky\n        self.dir = 1\n        self.pos = 0\n\n    def draw(self, toSurface, x, y):\n        '''\n        Draws to specied surface, to coords x, y\n        '''\n        rect = pygame.Rect((x, y), toSurface.get_size())\n        logger.debug('Rect: {}'.format(rect))\n        if not rect.colliderect(self.rect):\n            return\n        # Translate start to screen coordinates\n        x = self.rect.left - x\n        y = self.rect.top - y\n        for row in self.tiles:\n            xx = x\n            for t in row:\n                t.draw(toSurface, xx, y)  # tile drawing is in screen coordinates, that is what we have on x & y\n                xx += t.getTileSet().tilewidth\n            y += t.getTileSet().tileheight\n\n    def update(self):\n        self.pos += self.dir\n        self.rect.left = self.rect.left + self.dir\n        if self.pos == 100:\n            self.dir = -1\n        elif self.pos == 0:\n            self.dir = 1\n\n\n######################\n# TileSet            #\n######################\nclass TileSet(object):\n    def __init__(self, parentMap):\n        self.name = None\n        self.tilewidth = self.tileheight = self.tilespacing = 0\n        self.image_path = ''\n        self.image_width = self.image_heigth = 0\n        self.firstgid = 0\n        self.surface = None\n        self.tiles = []\n        self.animated_tiles = []\n        self.properties = {}\n        self.tiles_properties = {}\n        self.parent_map = parentMap\n\n    def __loadTilesProperties(self, node):\n        self.tiles_properties = {}\n        for t in node.findall('tile'):\n            tid = int(t.attrib['id'])\n            self.tiles_properties[tid] = Maps._loadProperties(t.find('properties'))\n\n    def __loadTileSet(self, relativePath, node):\n        image = node.find('image')\n\n        self.name = node.attrib['name']\n        self.tilewidth = int(node.attrib['tilewidth'])\n        self.tileheight = int(node.attrib['tileheight'])\n        self.tilespacing = int(node.attrib.get('spacing', 0))\n        self.image_path = image.attrib['source']\n        self.image_width = int(image.attrib['width'])\n        self.image_height = int(image.attrib['height'])\n\n        image = pygame.image.load(os.path.join(relativePath, self.image_path))\n\n        image = image.convert_alpha()\n        image.set_alpha(0, pygame.RLEACCEL)\n\n        self.surface = image  # Store original surface\n\n        self.properties = Maps._loadProperties(node.find('properties'))\n        self.__loadTilesProperties(node)\n\n    def __loadExternalTileset(self, relativePath, path):\n        print \"Loading tileset \", path\n        tree = ET.parse(os.path.join(relativePath, path))\n        root = tree.getroot()  # Map element\n        self.__loadTileSet(relativePath, root)\n\n    def load(self, relativePath, node):\n        logger.debug('Loading tileset in path {}'.format(relativePath))\n        if 'source' in node.attrib:\n            self.__loadExternalTileset(relativePath, node.attrib['source'])\n        else:\n            self.__loadTileSet(relativePath, node)\n\n        self.firstgid = int(node.attrib['firstgid'])\n\n        logger.debug('Image path: {} {}x{}'.format(self.image_path, self.image_width, self.image_height))\n\n        tilesPerRow = self.surface.get_width() / (self.tilewidth+self.tilespacing)\n        tilesRows = self.surface.get_height() / (self.tileheight+self.tilespacing)\n\n        self.tiles = [None] * (tilesRows*tilesPerRow)  # Gens a dummy array of this len\n\n        logger.debug('Tiles Grid size: {}x{}'.format(tilesPerRow, tilesRows))\n        for y in xrange(tilesRows):\n            for x in xrange(tilesPerRow):\n                localTileId = y*tilesPerRow+x\n                tileId = self.firstgid+localTileId-1\n                # Map data contains global tile id (i.e., tile id + tileset firstgid - 1)\n                # We keep here a reference to tiles in thow places (same reference in fact)\n                self.tiles[localTileId] = Tile(self,\n                    tileId,\n                    self.surface.subsurface(((self.tilewidth+self.tilespacing)*x, (self.tileheight+self.tilespacing)*y, self.tilewidth, self.tileheight)),\n                    self.tiles_properties.get(localTileId, {})\n                )  # Creates reference\n\n        self.animated_tiles = [i for i in self.tiles if i.animated]\n\n    def getTile(self, localTileId):\n        return self.tiles[localTileId]\n\n    def getProperty(self, propertyName):\n        '''\n        Obtains a property associated whit this tileset\n        '''\n        return self.properties.get(propertyName)\n\n    def update(self):\n        for t in self.animated_tiles:\n            t.update()\n\n    def __unicode__(self):\n        return 'Tileset {}: {}x{} ({})'.format(self.name, self.tilewidth, self.tileheight, self.properties)\n\n\n######################\n# Layer              #\n######################\nclass Layer(object):\n    LAYER_TYPE = 'default'\n    EMPTY_TILE = Tile(None, 0, None)\n\n    def __init__(self, parentMap=None, layerType=None, properties={}):\n        self.name = None\n        self.type = layerType if layerType is not None else self.LAYER_TYPE\n        self.parentMap = parentMap\n        self.setProperties(properties)\n\n    def setProperties(self, properties):\n        self.properties = properties\n        # Set custom \"flags\" based on properties\n\n    def updateAttributes(self):\n        self.visible = self.properties.get('visible', 'True') == 'True'\n\n    def load(self, node):\n        pass\n\n    def update(self):\n        pass\n\n    def draw(self, toSurface, x=0, y=0, width=0, height=0):\n        pass\n\n    def getType(self):\n        return self.type\n\n    def getTileAt(self, x, y):\n        return Layer.EMPTY_TILE\n\n    def isVisible(self):\n        return self.visible\n\n    def getProperty(self, propertyName):\n        '''\n        Obtains a property associated whit this layer\n        '''\n        return self.properties.get(propertyName)\n\n\n######################\n# ArrayLayer         #\n######################\nclass ArrayLayer(Layer):\n    LAYER_TYPE = 'array'\n\n    def load(self, node):\n        self.name = node.attrib['name']\n        self.width = int(node.attrib['width'])\n        self.height = int(node.attrib['height'])\n\n        self.properties = Maps._loadProperties(node.find('properties'))\n\n        data = node.find('data')\n        if data.attrib['encoding'] != 'base64':\n            raise Exception('No base 64 encoded')\n        self.data = struct.unpack('<' + 'I'*(self.width*self.height), base64.b64decode(data.text))\n\n    def draw(self, toSurface, x=0, y=0, width=0, height=0):\n        tiles = self.parentMap.tiles\n        tileWidth = self.parentMap.tilewidth\n        tileHeight = self.parentMap.tileheight\n\n        width = toSurface.get_width() if width <= 0 else width\n        height = toSurface.get_height() if height <= 0 else height\n\n        xStart, xLen = x / tileWidth, (width + tileWidth - 1) / tileWidth + 1\n        yStart, yLen = y / tileHeight, (height + tileHeight - 1) / tileHeight + 1\n\n        if xStart > width or yStart > height:\n            return\n\n        xOffset = x % tileWidth\n        yOffset = y % tileHeight\n\n        xEnd = self.width if xStart+xLen > self.width else xStart+xLen\n        yEnd = self.height if yStart+yLen > self.height else yStart+yLen\n\n        for y in xrange(yStart, yEnd):\n            for x in xrange(xStart, xEnd):\n                if x >= 0 and y >= 0:\n                    tile = self.data[y*self.width+x]\n                    if tile > 0:\n                        tiles[tile-1].draw(toSurface, (x-xStart)*tileWidth-xOffset, (y-yStart)*tileHeight-yOffset)\n\n    def update(self):\n        super(ArrayLayer, self).update()\n\n    def getTileAt(self, x, y):\n        x /= self.parentMap.tilewidth\n        y /= self.parentMap.tileheight\n        tile = self.data[y*self.width+x]\n        if tile == 0:\n            return Layer.EMPTY_TILE\n        return self.parentMap.tiles[tile-1]\n\n    def __unicode__(self):\n        return 'ArrayLayer {}: {}x{} ({})'.format(self.name, self.width, self.height, self.properties)\n\n\n######################\n# DynamicLayer       #\n######################\nclass DynamicLayer(Layer):\n    LAYER_TYPE = 'dynamic'\n\n    def load(self, node):\n        self.name = node.attrib['name']\n        self.width = int(node.attrib['width'])\n        self.height = int(node.attrib['height'])\n\n        self.properties = Maps._loadProperties(node.find('properties'))\n\n        paths = {}\n        self.platforms = {}\n\n        for obj in node.findall('object'):\n            if obj.attrib['type'] == 'path':  # This is a path, store it in paths\n                name = obj.attrib['name']\n                properties = Maps._loadProperties(obj.find('properties'))\n                polyline = [[int(v) for v in i.split(',')] for i in obj.find('polyline').attrib['points'].split(' ')]\n                start = properties.get('start', 'start')\n                direction = properties.get('direction', 'forward')\n                if start == 'begin':\n                    start = 0\n                    direction = 'forward'\n                elif start == 'end':\n                    start = len(polyline)-1\n                    direction = 'backward'\n                direction = 1 if direction == 'forward' else -1\n                paths[name] = {\n                    'x': obj.attrib['x'],\n                    'y': obj.attrib['y'],\n                    'polyline': polyline,\n                    'start': start,\n                    'direction': direction\n                }\n\n                logger.debug('Path {} {}'.format(name, paths[name]))\n            elif obj.attrib['type'] == 'platform':\n                name = obj.attrib['name']\n                properties = Maps._loadProperties(obj.find('properties'))\n                startX, startY = int(obj.attrib['x']), int(obj.attrib['y'])\n                width, height = int(obj.attrib['width']), int(obj.attrib['height'])\n                layer = self.parentMap.getLayer(properties.get('layer', None))\n                tiles = []\n\n                for y in xrange(startY, startY+height, self.parentMap.tileheight):\n                    t = []\n                    for x in xrange(startX, startX+width, self.parentMap.tilewidth):\n                        t.append(layer.getTileAt(x, y))\n                    tiles.append(t)\n\n                p = Platform(startX, startY, width, height, properties.get('path', None), tiles, properties.get('sticky', False))\n                self.platforms[obj.attrib['name']] = p\n\n                logger.debug('Platform {}'.format(p))\n\n            # Get obj properties to know that is this\n        # After loading, add paths to Platforms\n        for p in self.platforms.itervalues():\n            p.path = paths[p.path]\n\n    def draw(self, toSurface, x=0, y=0, width=0, height=0):\n        for obj in self.platforms.itervalues():\n            obj.draw(toSurface, x, y)\n\n    def update(self):\n        for obj in self.platforms.itervalues():\n            obj.update()\n\n\n######################\n# Map                #\n######################\nclass Map(object):\n    def __init__(self, mapId, path, properties={}):\n        self.id = mapId\n        self.path = resource_path(path)\n        self.reset()\n\n    def __getLayers(self, layersNames):\n        if layersNames is None:\n            layersNames = self.layers_names\n        return layersNames\n\n    def reset(self, fromNode=None):\n        self.width = self.height = self.tilewidth = self.tileheight = 0\n        self.tilesets = {}\n        self.layers_names = []\n        self.holders_names = []\n        self.layers = {}\n        self.tiles = []\n        self.properties = {}\n        if fromNode is not None:\n            self.width = int(fromNode.attrib['width'])\n            self.height = int(fromNode.attrib['height'])\n            self.tilewidth = int(fromNode.attrib['tilewidth'])\n            self.tileheight = int(fromNode.attrib['tileheight'])\n            self.properties = Maps._loadProperties(fromNode.find('properties'))\n\n    def load(self):\n        mapPath = os.path.dirname(self.path)\n\n        tree = ET.parse(self.path)\n        root = tree.getroot()  # Map element\n\n        logger.debug('Loading map \"{}\" in folder \"{}\"'.format(self.id, mapPath))\n\n        self.reset(root)\n\n        for tileSet in root.findall('tileset'):\n            ts = TileSet(self)\n            ts.load(mapPath, tileSet)\n\n            self.tilesets[ts.name] = ts\n\n            self.tiles.extend(ts.tiles)\n\n        # Now load map data into layers, we understand right now only base 64\n        # This loads the standard tiles layers\n        for layer in root.findall('layer'):\n            l = ArrayLayer(self)\n            l.load(layer)\n\n            self.addLayer(l)\n\n            # Now load \"object\" layers and convert them to DynamicLayer\n        for layer in root.findall('objectgroup'):\n            l = DynamicLayer(self)\n            l.load(layer)\n\n            self.addLayer(l)\n\n    def addLayer(self, layer):\n        if layer.getProperty('holder') == 'True':\n            logger.debug('Layer {} is a holder layer'.format(layer.name))\n            self.holders_names.append(layer.name)\n        else:\n            self.layers_names.append(layer.name)\n        self.layers[layer.name] = layer\n\n    def getLayer(self, layerName):\n        return self.layers.get(layerName)\n\n    def draw(self, surface, x=0, y=0, width=0, height=0, layersNames=None):\n        layersNames = self.__getLayers(layersNames)\n\n        for layerName in layersNames:\n            self.layers[layerName].draw(surface, x, y, width, height)\n\n    def update(self, layersNames=None):\n        layersNames = self.__getLayers(layersNames)\n\n        # Keep order intact\n        for layerName in layersNames:\n            self.layers[layerName].update()\n\n        for ts in self.tilesets.itervalues():\n            ts.update()\n\n    def getProperty(self, propertyName):\n        '''\n        Obtains a property associated whit this map\n        '''\n        return self.properties.get(propertyName)\n\n    def __unicode__(self):\n        return 'Map {}: {}x{} with tile of  ({})'.format(self.path, self.width, self.height, self.tilewidth, self.tileheight, self.properties)\n\n\n# Loads a TMX file\n# TMX properties that will be used:\n# For layer:\n#   * holder: Defaults to False\n#     Indicates that this layer will never been drawn\n#     This will be used as a \"holder\" for \"object layers\" tiles/sprites\n#   * collission: Defaults to False\n#     If set to false, collisions against this map will not been check against this layer\n# Object layers are used this way: (objectgroups)\n#   Rects define the \"source tiles\" for an object (platform or not)\n#   polylines defines paths\n#   Object types:\n#     * platform, Object that moves and translates the \"holding\" objects with it\n#     * path, Used to describe a path, not drawn (must be set in polilynes for maybe future increased use of this)\n#     * object, Simple object. If no type is specified, this is the default type for objects\n#   Objects properties:\n#     * speed: Speed for this object (used by moving platforms)\n#     * path: specifies the path \"object\" that will describe the movement of this (right now, polylines)\n#     * layer: For object and platform types is required, and indicates where to get from the \"sprites\"\n\nclass Maps(object):\n    def __init__(self):\n        self._maps = {}\n\n    def add(self, mapId, path):\n        self._maps[mapId] = Map(mapId, path)\n\n    @staticmethod\n    def _loadProperties(node):\n        props = {}\n        if node is not None:\n            for p in node.findall('property'):\n                logger.debug('Found property {}={}'.format(p.attrib['name'], p.attrib['value']))\n                props[p.attrib['name']] = p.attrib['value']\n        return props\n\n    def load(self, mapId=None, force=False):\n        if mapId is None:\n            for mId in self._maps:\n                self.load(mId, force)\n            return\n\n        if mapId not in self._maps:\n            return False\n\n        m = self._maps[mapId]\n        m.load()\n\n    def get(self, mapId):\n        return self._maps[mapId]\n\n    def __unicode__(self):\n        r = ''\n        for v in self._maps:\n            r += unicode(v)\n",
			"file": "resources/resources/maps.py",
			"file_size": 19281,
			"file_write_time": 130536908512092238,
			"settings":
			{
				"buffer_size": 19281,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"Pa",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: Discover Packages"
			],
			[
				"Pyt",
				"User: Python PEP8 Autoformat"
			],
			[
				"form",
				"User: Python PEP8 Autoformat"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"Pack",
				"Package Control: List Packages"
			],
			[
				"Snippet: bs3-",
				"Snippet: bs3-panel"
			],
			[
				"bs3-col-6",
				"Snippet: bs3-col-6"
			],
			[
				"bs3-col",
				"Snippet: bs3-col-6"
			],
			[
				"bs3-ro",
				"Snippet: bs3-row"
			],
			[
				"Pac",
				"Package Control: Install Package"
			],
			[
				"Django",
				"Django: Sync Database"
			],
			[
				"Djang",
				"Django: Run Server"
			],
			[
				"Djan",
				"Django: Help"
			],
			[
				"djang",
				"Set Syntax: HTML (Django)"
			],
			[
				"",
				"Django: Check"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"Packa",
				"Package Control: Install Package"
			],
			[
				"Contr",
				"Package Control: List Packages"
			],
			[
				"Snippet: ",
				"Snippet: Lorem ipsum"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/dkmaster/projects/pygame/resources/resources/game_state.py",
		"/home/dkmaster/projects/pygame/resources/parallax.py",
		"/home/dkmaster/projects/pygame/resources/test_windows.spec",
		"/home/dkmaster/projects/pygame/game/test.py",
		"/home/dkmaster/projects/pygame/resources/test.spec",
		"/home/dkmaster/projects/pygame/parallax/test.py",
		"/home/dkmaster/projects/pygame/states/test.py",
		"/home/dkmaster/projects/pygame/resources/resources/__init__.py",
		"/home/dkmaster/projects/pygame/tile/test.py",
		"/home/dkmaster/projects/pygame/resources/test.py",
		"/home/dkmaster/projects/pygame/resources/resources/util.py",
		"/home/dkmaster/projects/pygame/resources/resources/images.py",
		"/home/dkmaster/projects/pygame/resources/resources/maps.py",
		"/home/dkmaster/projects/pygame/states/resources/game_state.py",
		"/home/dkmaster/projects/pygame/states/resources/__init__.py",
		"/home/dkmaster/projects/pygame/parallax/parallax.py",
		"/home/dkmaster/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/dkmaster/projects/pygame/game/resources/__init__.py",
		"/home/dkmaster/projects/pygame/tile/resources/__init__.py",
		"/home/dkmaster/projects/pygame/parallax/resources/images.py",
		"/home/dkmaster/projects/pygame/tile/resources/maps.py",
		"/home/dkmaster/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
		"/home/dkmaster/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/dkmaster/projects/pygame/parallax/resources/__init__.py",
		"/home/dkmaster/projects/pygame/demos/pyParallax-master/demo/demo.py",
		"/home/dkmaster/projects/pygame/demos/pyParallax-master/lib/parallax.py",
		"/home/dkmaster/projects/pygame/parallax/demo.py",
		"/home/dkmaster/.config/sublime-text-3/Packages/User/Python Django.sublime-settings",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/urls.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/models.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/admin.py",
		"/home/dkmaster/projects/udsenterprise.com/wiki/sitemaps.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/settings.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/signals.py",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/static/css/sections/_blog.scss",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/static/css/components/_utility.scss",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/templates/base.html",
		"/home/dkmaster/projects/udsenterprise.com/uds_filer/models.py",
		"/home/dkmaster/projects/udsenterprise.com/knowledge/views.py",
		"/home/dkmaster/projects/udsenterprise.com/knowledge/models.py",
		"/home/dkmaster/projects/udsenterprise.com/wiki/plugins/haystack/search_indexes.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/sitemaps.py",
		"/home/dkmaster/projects/udsenterprise.com/knowledge/sitemaps.py",
		"/home/dkmaster/projects/udsenterprise.com/knowledge/search_indexes.py",
		"/home/dkmaster/projects/udsenterprise.com/knowledge/templates/search/indexes/knowledge/question_text.txt",
		"/home/dkmaster/projects/udsenterprise.com/uds_search/conf.py",
		"/home/dkmaster/projects/udsenterprise.com/uds_search/search_indexes.py",
		"/home/dkmaster/projects/udsenterprise.com/uds_search/views.py",
		"/home/dkmaster/projects/udsenterprise.com/knowledge/managers.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/search_indexes.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/managers.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/exceptions.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/plugin/blog-plugin.html",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/static/css/sections/_news.scss",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/settings.py",
		"/home/dkmaster/projects/udsenterprise.com/uds_search/utils.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/views.py",
		"/home/dkmaster/projects/udsenterprise.com/wiki/models/__init__.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/cms_plugins.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/dateline.html",
		"/home/dkmaster/projects/udsenterprise.com/uds_articles/templates/uds_posts/plugin.html",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/templates/components/social-inner.html",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/plugin/blog-ticker.html",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/settings.py.online",
		"/home/dkmaster/projects/udsenterprise.com/biblion/urls.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/pagination.html",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/blog_list.html",
		"/home/dkmaster/projects/udsenterprise.com/uds_articles/models.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/search/indexes/biblion/post_text.txt",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/plugin/plugin.html",
		"/home/dkmaster/projects/udsenterprise.com/knowledge/settings.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/blog_base.html",
		"/home/dkmaster/projects/udsenterprise.com/biblion/conf.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/blog_post.html",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/templates/simple-content.html",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/templates/page.html",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/templates/components/extra_head.html",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/templates/home.html",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/rss_feed.xml",
		"/home/dkmaster/projects/udsenterprise.com/uds_search/cms_app.py",
		"/home/dkmaster/projects/udsenterprise.com/uds_search/templates/uds_search/includes/pagination.html",
		"/home/dkmaster/projects/udsenterprise.com/biblion/utils.py",
		"/home/dkmaster/projects/udsenterprise.com/knowledge/utils.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templatetags/biblion_tags.py",
		"/home/dkmaster/projects/udsenterprise.com/django_notify/models.py",
		"/home/dkmaster/projects/udsenterprise.com/uds_filer/admin.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/mail/comment_added.html",
		"/home/dkmaster/projects/udsenterprise.com/uds_users/mail.py",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/filer/__init__.py",
		"/home/dkmaster/projects/udsenterprise.com/uds_carousel/templates/uds_carousel/plugin.html",
		"/home/dkmaster/projects/udsenterprise.com/uds_filer/filer/__init__.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/rss_item.xml",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/util/decorators.py",
		"/home/dkmaster/projects/udsenterprise.com/env/lib/python2.7/site-packages/cmsplugin_filer_file/templates/cmsplugin_filer_file/plugins/file/default.html",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/util/__init__.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/forms.py",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/templates/components/social.html",
		"/home/dkmaster/projects/udsenterprise.com/uds_users/util.py",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/comment_added.html",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/atom_feed.xml",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/new_post.html",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/atom_entry.xml",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/tagsline.html",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/dateline_stale.html",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/templates/components/header.html",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/static/css/components/_variables.scss",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/static/css/udsenterprise.scss",
		"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com/templates/404.html",
		"/home/dkmaster/projects/udsenterprise.com/biblion/templates/biblion/blog_section_list.html",
		"/home/dkmaster/projects/udsenterprise.com/uds_users/views.py",
		"/home/dkmaster/projects/udsenterprise.com/uds_users/forms.py",
		"/home/dkmaster/projects/udsenterprise.com/uds_users/urls.py",
		"/home/dkmaster/projects/udsenterprise.com/uds_users/templates/uds_users/registration.html",
		"/home/dkmaster/projects/udsenterprise.com/biblion/cms_app.py",
		"/home/dkmaster/projects/udsenterprise.com/uds_users/templates/uds_users/index.html",
		"/home/dkmaster/projects/udsenterprise.com/blogango/views.py",
		"/home/dkmaster/projects/udsenterprise.com/blogango/cms_app.py",
		"/home/dkmaster/projects/udsenterprise.com/wiki/plugins/haystack/__init__.py",
		"/home/dkmaster/projects/udsenterprise.com/zinnia/cms_app.py",
		"/home/dkmaster/projects/udsenterprise.com/zinnia/cms_urls.py",
		"/home/dkmaster/projects/udsenterprise.com/manage.py",
		"/home/dkmaster/projects/udsenterprise.com/uds_users/templates/uds_users/recover-password.html",
		"/home/dkmaster/projects/udsenterprise.com/knowledge/templates/django_knowledge/index.html",
		"/home/dkmaster/projects/udsenterprise.com/wiki/templates/wiki/base_site.html",
		"/home/dkmaster/projects/udsenterprise.com/wiki/templates/wiki/base.html",
		"/home/dkmaster/projects/udsenterprise.com/uds_users/templates/uds_users/mail-sent.html",
		"/home/dkmaster/projects/udsenterprise.com/uds_users/templates/uds_users/password-changed.html",
		"/home/dkmaster/projects/udsenterprise.com/uds_users/templates/uds_users/registration-confirmed.html"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"/home/dkmaster/projects/udsenterprise.com/udsenterprise_com"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"t",
			"__loadTilesProperties",
			"__loadProperties",
			"fromNode",
			"))\n",
			"getArrayLayer",
			"MapLayer",
			"Layer",
			"spacing",
			"speed",
			"command",
			"map",
			"source",
			"image_path",
			"m['path']",
			"m['height']",
			"m['width']",
			"m['tilesets']",
			"m['tiles']",
			"map",
			"__getTileSetInfo",
			"__getTileSet",
			"    \n",
			"__getTileSet",
			"':",
			"16",
			"post",
			"left",
			"tag.tag",
			"page_obj",
			"\n                                ",
			"ICON",
			"fondo-carousel",
			"content",
			"section",
			"\n                ",
			"hover",
			"content_html",
			"markup",
			"blog_feed",
			"reverse",
			"reverse('",
			"reverse",
			"ANONYMOUS",
			"staff",
			"netdna",
			"staff",
			";<",
			"table",
			"mediaModal",
			"FILER",
			"password2",
			".responsive-table",
			"#no-more-tables",
			"Roboto",
			"paginate",
			"return",
			"</p>",
			"<p>",
			"modal-id",
			"EMAIL",
			"LANGUAGE",
			"ROOT_URLCONF",
			"student",
			"Student",
			"StudentForm",
			"student",
			"Xapian",
			"_get_backend",
			"get_default_language",
			"LANGUAGE_FROM_ALIAS",
			"haystack_use_for_indexing",
			"excer",
			"STEMM",
			"/([^/]*)')\n",
			"result",
			"/',",
			"from .conf",
			"wiki_footer_prepend",
			"block",
			"BASE_DIR",
			"PROJECT_PATH",
			"NOTIFY",
			"LOGIN",
			"color",
			"login-menu",
			"pull",
			"redirect",
			"Form",
			"tab",
			"snippet",
			"url",
			"CSRF",
			"$primary-color-darker",
			"@media",
			"udsmgmnt",
			"$nav-menu-",
			"$selector",
			"$selector ",
			".navbar-menu",
			".navbar-inverse ",
			".navbar-nav-menu ",
			".navbar-inverse",
			"edit",
			"font",
			"111",
			"background",
			"../img/",
			"#46586a",
			"#46586A",
			")",
			"Verdana",
			"verdana",
			"#5A6F89",
			"H2",
			"render",
			"rendeer",
			"context = RequestContext",
			"render(request, ",
			"render",
			"def ",
			"def",
			"render(request,",
			"render",
			"template",
			".new-ticker",
			"news-ticker",
			".demo3"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"_loadTilesProperties",
			"_loadProperties",
			"fromXml",
			"getLayer",
			"ArrayLayer",
			"MapLayer",
			"tag.slug",
			"page",
			"reverse('blog:",
			"udsYoutubeModal",
			".table-responsive",
			".responsive-table",
			"",
			"modal-prof-{{ plugin_index }}",
			"user_profile",
			"UserProfile",
			"UserProfileForm",
			"user_profile",
			"$color-negro",
			"accounts",
			"$",
			"",
			"#{$selector}",
			"#{$selector} ",
			"$selector",
			".navbar-menu ",
			".navbar-nav-menu",
			"img/",
			"$background-color",
			"ctx = RequestContext",
			"render_to_response(",
			".news-ticker",
			".new-ticker",
			"$secondary-color-A",
			"secondary-color",
			"$primary-color",
			"Article",
			"$color-negro",
			"$color-verde",
			"home-carousel-captions",
			"homeCarousel",
			"@userResource",
			"@DetailModelRestApi",
			"@BasicModelRest",
			"@Cache",
			"user-id"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "resources/test.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2673,
						"regions":
						{
						},
						"selection":
						[
							[
								2673,
								2673
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/Djaneiro/Syntaxes/Python Django.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 841.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "resources/resources/images.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1787,
						"regions":
						{
						},
						"selection":
						[
							[
								1787,
								1787
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/Djaneiro/Syntaxes/Python Django.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "resources/resources/maps.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19281,
						"regions":
						{
						},
						"selection":
						[
							[
								248,
								248
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/Djaneiro/Syntaxes/Python Django.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "pygame.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"~/sublime/udsenterprise-web.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 356.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
